
1)Lambda Expressions
2)Functional Interfaces
3)Dafault Methods in Interfaces(Till 1.7 all the methods in interfaces are public abstract by dafault and varaible public static final whether we are declaring or not ) but in 1.8 we can add concret methods in interfaces those methods are default methods
4)Static methods in Interfaces (From 1.8 versions)
5)Predifined functional Interfaces : 1) Predicate 2)Function 3)Consumer 
6) :: operator (for method reference and constructor reference) by double colon(::) operator
7)Stream API  
8)Date and Time API(Introduced by joda.org) also known as Joda API
==================================================================================================================================================
what is the specaility of java 1.8 version:
- 1.0 version came in 1996 (first major version)
- 1.1 minor version
- 1.2 major version (collection framework)
- 1.3 & 1.4 version are minor one
- 1.5 major version (for each loop,annotations concept , enum ,vararg methods , jenrics also,autoboxing and autounboxing)
- 1.6 1.7 are minor version
- 1.8 major version 
	objective of 1.8 - (1) To simplify programming (for clean code)
					   (2) To utilize functional programming benfits in java : functional oriented and procedure oriented programming features we are missing that's why java for getting benfits of functional programming java  introduced Lambda Expressions
					   (3) To enable parallel programming(processes) (Stream)
=================================================================================================================================================================================
Lambda Expression: 
				1)LISP first programming language uses lambda expression , C , C++ , Objective C , C#.NET , SCALA , RUBY ,Python.....,Finally Java Also .
				
				Benifits of Lambda Expression : 
						(1) To enable functional programming in java
						(2) To write more readable , maintainble and concise code
						(3) To use APIs very easily and effectively
						(4) To enable Parallel processing
============================================================================================================================================
what is Lambda Expression : 
			It's Anonymous Function (not having name,not having modifiers , not having any return type)
How to write Lambda Expression : 
			Ex1: public void m1(){			(lambda Expression)
					sop(Hello);    ----->     () -> { sop("Hello"); }      OR   ()-> sop("Hello");
				} 
			Ex2: public void add(int a,int b){
					sop(a+b);     ------>       (int a , int b)->{ sop(a+b); }   OR    (int a,int b)-> sop(a+b);  OR  (a,b) -> sop(a+b);
				}
				public int getLength(String str){
				    return str.length();  ------->    (String str)-> { return str.length(); }  OR (String str) -> return str.length();  OR (str)->return s.length();  OR   (str) -> str.length() (return is not required to use) OR str -> str.length()
				}
    - If the body contains only one statement then curly braces are optional otherwise compulsory .
	- Sometimes compilers can detect data types of parameter automatically based on context that propertiy is "Type Inference"
	- If only one parameter is there not compulsion of round braces
	- Lambda expression can take any number of parameter 
=========================================================================================================================
Functional Inference :
	 - we have to call lambda expression based on our requirement
	 - for that we require functional Interface

     - Runnable(run method) , Callable(call() method) , ActionListener(In gui concept actionPerformed()) , Comparable(compareTo() method)  Interface are Functional Interface
	 - If Interface contains only one abstract method then that is functional Interface .
	 - It is used for envoke lambda expression method
	 - You can have multiple default or static methods in functional interface but one and only abstract method . 
Functional Interface Ex : only one abstract method 
interface Interf{

	public void m1();
	default void m2(){
	}
	public static void m3() {
	}
}

Not a functional Interface : 
--------------------------

interface Interf{
	public void m1();
	public void m2();
}
    
	- @FunctionalInterface Annotation : for showing explicitly this is functional Interface (For validation)
			- Adv : If you do mistake it will show Error 
			Ex1 : 
				@FunctionalInterface								@FunctionalInterface
				interface Interf{									interface Interf1{
					public void m1();									public void m1();  ====>>>>   Error: Unexpected @FunctionalInterface annotation , multiple non-overriding abstract methods present in Interf1
					dafault void m2(){ };								public void m2();
					public static m3() { };							}
				}
				
				@FunctionalInterface
				interface Interf2{
				
				}   ===> Error : compulsory it should contain one abstract method : Unexpected @FunctionalInterface annotation,no abstract method found in Interface Interf2
				
Function Interface wrt Inheritance
------------------------------------

	case 1 : If an interface extends functional Interface and child inteface doesn't contain any abstract method , then child interface is always functional interface

	Ex 1 : 
		@FunctionalInterface
		interface P{
			public void m1();
		}
		@FunctionalInterface
		inteface c extends p{
		
		} 
	Case 2 : In the child interface, we can define extactly same parent interface abstract method
	Ex 2 : 
		@FunctionalInterface
		interface P{
			public void m1();
		}
		@FunctionalInterface
		inteface c extends p{
			public void m1();
		} 
	case 3 : In the child interface we can't define any new abstract methods otherwise we will get Compile Time Error
	Ex:
		@FunctionalInterface
		interface P{
			public void m1();
		}
		@FunctionalInterface
		inteface c extends p{
			public void m2();
		}  Error : compile time Unexpected @FunctionalInterface annotation,multiple non overriding abstract method found in inteface 'c'
	case 4:
		@FunctionalInterface
		interface P{
			public void m1();
		}
		inteface c extends p{
			public void m2();
		} No Error : valid becz child class is not declared FunctionalInterface
===================================================================================================================================
		
Invoking Lambda Expression By using Functional Interface
		Ex1: 
        -without lambda Expression
		interface Interf{
			public void m1();
		}
		class Demo implements Interf{
			public void m1(){
				sop("m1() method implementation");
			}
		}
		class Test{
			public static void main(String[] args){
				Interf i = new Demo();
				i.m1();//m1() method implementation
			}
		} 
		
		 -with lambda Expression
		interface Interf{
			public void m1();
		}
	
		class Test{
			public static void main(String[] args){
				Interf i = ()->sop("m1() method implementation"); //compiler will understand that this is the implementation of m1() that is compulsory becz we must have to give body //internally name mapping happens with interface
				i.m1(); // m1() method implementation
			}
		} // we don't need to write extra class 
		
		Ex2:
		without lambda Expression
		interface Interf{
	
			public void add(int a,int b);
		}

		class Demo implements Interf{

	
			public void add(int a, int b) {
				System.out.println("The sum : "+ (a+b));
			}
	
		}
		public class Test1 {

			public static void main(String[] args) {
				Interf i = new Demo();
				i.add(10,20);
				i.add(100, 200);
			}
		}
        o/p : The sum : 30
			  The sum : 300
		with lambda Expression
		interface Interf1{
	
			public void add(int a,int b);
		}
		public class Test1Lambda {

				public static void main(String[] args) {
					Interf1 i = (a,b)-> System.out.println(a+b);
					i.add(10, 20);//30
					i.add(100, 200);//300
				}
		}
		Ex 3 : 
		without lambda Expression
		interface Interf2{
			public int getLength(String s);
		}

		class Demo1 implements Interf2{
			public int getLength(String s) {
				return s.length();
			}	
		}
		public class Test2 {

				public static void main(String[] args) {
					Interf2 i = new Demo1();
					System.out.println(i.getLength("Sachin"));//6
					System.out.println(i.getLength("Subramanayam"));//12
				}
		}
		with lambda Expression
		interface Interf3{
			public int getLength(String s);
		}
		public class Test2Lambda {

				public static void main(String[] args) {
					// TODO Auto-generated method stub
					Interf3 i = s -> s.length();
					System.out.println(i.getLength("Sachin"));//6
					System.out.println(i.getLength("Subramanayam"));//12
				}

		}
		Lambda Expression on RunnableInterface : 
		---------------------------------------
		without Lambda Expression :
		class MyRunnable implements Runnable{
		
			public void run() {
				for(int i=0;i<10;i++) {
					System.out.println("In child thread");
				}
			}	
		}
		public class NormalRunnable {

			public static void main(String[] args) {
				// TODO Auto-generated method stub
					Runnable runnable = new MyRunnable();
					Thread t1 = new Thread(runnable);
					t1.start();
		
					for(int i=0;i<10;i++) {
						System.out.println("In main thread");
					}
			}

		}
		o/p : May vary : In main thread
			In main thread
			In child thread
			In child thread
			In child thread
			In child thread
			In child thread
			In child thread
			In child thread
			In child thread
			In child thread
			In child thread
			In main thread
			In main thread
			In main thread
			In main thread
			In main thread
			In main thread
			In main thread
			In main thread
		With Lambda Expression:
		public class LambdaRunnable {

			public static void main(String[] args) {
				// TODO Auto-generated method stub
				Runnable runnable = ()-> {
					for(int i=0;i<10;i++) {
						System.out.println("In child Thread ");
					}
				};
				Thread t1 = new Thread(runnable);
				t1.start();
				for(int i=0;i<10;i++) {
					System.out.println("In main thread");
				}
			}

		}
================================================================================================================================
		
Summary of functional Interface and Lambda Expression
       FunctionalInterface - (1)It should contains exactly one abstract method
							 (2)It can contain any number of default and static methods	
							 (3)It acts as type for lambda expression
									Ex: Interf i = ()-> sop("Hello");
									    (Type)            (Lambda Expression)
							 (4)It can be used to invoke lambda Expressions
									Ex: i.m1();
	 Why functional Interface should contains only one abstract method?
	 interface Interf{
	   public void m1(int num);
	 }
	 
	 Interf i =num -> sop(num*num); If we add multiple method compile get cofusion and unable to identify 
	 
	 -What is the advantage of @FunctionalInterface Annotation? // for validation If we do mistake add extra method than one it will give Error
	 
	 interface Interf{
		public void m1();
	} 
	
===================================================================================================================================================